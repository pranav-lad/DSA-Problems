Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.



class Solution {
public:
    int kConcatenationMaxSum(vector<int>& arr, int k) {
    long long sub_sum = 0; 
    long long max_sum = 0; 
    long long sum = 0;  
    long long M = 1e9+7;
    for(int i = 0 ; i < min(k, 2)*arr.size(); i++) {
        if(i < arr.size())
            sum += arr[i];
        
        if(sub_sum < 0)
            sub_sum = 0;
        sub_sum += arr[i%arr.size()];
        max_sum = max(sub_sum, max_sum);
    }
    
    if(k <= 2)
        return max(max_sum, (sum * k)) % M;
    
    if(sum > 0)
        return (max_sum + (sum * (k-2)) % M) % M;
    
    return max_sum % M;
    }
};
